def repoName
def repoURL
def branchName
pipeline {
  agent any
  tools {
  nodejs "NODE"
  maven "maven3.6.3"
  }
  
  stages{
     
    stage('SCM Checkout'){
	steps {
        script {
      def scmVars = checkout([
        $class: 'GitSCM'
      ])
    }
       checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'GithubCredentails', url: 'https://github.com/mudaliar20/CanApplication.git']]])
        
                
    }
	}
    
    stage(" Maven Clean Package"){
	steps{
      sh '''
      mvn clean package -DskipTests
      npm install
      '''
      
    } 
	}
        
     stage('Black duck Scan'){
	steps {
            synopsys_detect detectProperties: '''
            --detect.project.version.name=${BUILD_NUMBER}
            --detect.project.name="Canada-Application"
            --detect.source.path=${WORKSPACE}
            --detect.report.timeout=30000
            ''', returnStatus: true
    }
	} 

    
    stage('Build and Push Docker Image'){
	steps{
         sh '''
                docker build -t 3.128.135.88:8083/petclinic:${BUILD_NUMBER} . >&1 | tee SomeFile.txt
                 docker login -u admin -p admin123 3.128.135.88:8083
                 docker push 3.128.135.88:8083/petclinic:${BUILD_NUMBER} >&1 | tee docker.txt
               '''
    }
	}
      
      //Comment the Twistlock stage if using assessment in DCP
     /* stage('twislock scan'){
	    steps{
	    sh '''
	    /home/ubuntu/twistcli images scan --address https://us-east1.cloud.twistlock.com/us-2-158284876 -u edf7a14e-2f5e-4964-b006-48c265f7fc17 -p ehfzcW/0aJL+jkJbcHLE0HlCVO0= 3.128.135.88:8083/petclinic:${BUILD_NUMBER} >&1 | tee demo.txt
	    '''
	}
	} */
  
     
  
	
     stage('Test') {
	 steps{
	 script{
	 repoName = determineRepoName()
         branchName = getGitBranchName() 
         repoURL = determineRepoURL()
	 }
         sh '''
         rm -rf *.properties
         IMAGEID="$(grep "sha256:" demo.txt | cut -c 59-129 | awk '{$1=$1;print}')"
         echo "TwislockImageID=${IMAGEID}" >> variable.properties
         IMAGENAME="$(grep "Successfully tagged" SomeFile.txt | cut -d' ' -f 3)"
         echo "TwislockImageName=${IMAGENAME}" >> variable.properties
         echo "jobName=${JOB_NAME}" >> variable.properties
         echo "buildNumber=${BUILD_NUMBER}" >> variable.properties
         echo "commitId=${GIT_COMMIT}" >> variable.properties
         echo "BlackDuckProject=Canada-Application" >> variable.properties
         echo "BlackDuckVersion=${BUILD_NUMBER}" >> variable.properties
         echo "ApplicationName=PetClinicDemoNexus" >> variable.properties
         echo "ApplicationProcess=DeployApplication" >> variable.properties
         echo "ImgName=3.128.135.88:8083/petclinic:1" >> variable.properties
         '''	
         sh "echo repoName=$repoName >> variable.properties"
         sh "echo branchName=$branchName >> variable.properties"
         sh "echo repoURL=$repoURL >> variable.properties"
    }
     }
     
     //Comment this stage if creating UCD task in DCP for deployment
    /* stage('Deploy'){
	    steps{
	    //Deployment steps to be defined here
	}
	} */
    
}
  
    post {
        always {
            
            archiveArtifacts artifacts: "variable.properties"
        }
    } 

}



String determineRepoName() {
    return scm.getUserRemoteConfigs()[0].getUrl().tokenize('/')[3].split("\\.")[0]
}
String determineRepoURL() {
    return scm.getUserRemoteConfigs()[0].getUrl()
}
String getGitBranchName() {
    return scm.branches[0].name.tokenize("*")[0].split("\\/")[1]
}
